[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 VarEst2Phase authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Takumi Saegusa. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Saegusa T (2022). VarEst2Phase: Variance Estimation Two-Phase Design Survive Data. R package version 0.0.0.9004.","code":"@Manual{,   title = {VarEst2Phase: Variance Estimation Under Two-Phase Design For Survive Data},   author = {Takumi Saegusa},   year = {2022},   note = {R package version 0.0.0.9004}, }"},{"path":"/index.html","id":"varest2phase","dir":"","previous_headings":"","what":"Variance Estimation Under Two-Phase Design For Survive Data","title":"Variance Estimation Under Two-Phase Design For Survive Data","text":"goal VarEst2Phase …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Variance Estimation Under Two-Phase Design For Survive Data","text":"can install development version VarEst2Phase GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"yiorfun/VarEst2Phase\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Variance Estimation Under Two-Phase Design For Survive Data","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"#library(VarEst2Phase) ### when finishing, delete this comment ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"/reference/BOOTSTRAP_PROCEDURE.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","title":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","text":"Estimate variances phase two regression coefficients using bootstrap procedure","code":""},{"path":"/reference/BOOTSTRAP_PROCEDURE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","text":"","code":"BOOTSTRAP_PROCEDURE(   brepsMax,   phase1_size,   phase2_size,   member_phase2,   DELTA,   OMEGA,   Gama_initial,   d,   qn,   ZMat,   UVec,   VVec,   knot,   degree,   boundary,   GENERATE_GRADIENT_HESSIAN,   GENERATE_PHI )"},{"path":"/reference/BOOTSTRAP_PROCEDURE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","text":"brepsMax number bootstrap random samples. phase1_size vector consisting sample sizes strata first phase. phase2_size vector consisting sample sizes strata second phase. member_phase2 vector consisting observations selected form second phase. DELTA matrix row indicates interval-censoring type observation sample size 3. example, (1, 0, 0) indicates UVec observed VVec reaches right boundary, (0, 1, 0) indicates UVec VVec observed (0, 0, 1) indicates UVec reaches left boundary VVec observed observation. OMEGA vector consisting weights observation two-phase sampling. two-phase sampling used, values OMEGA 1's. Gama_initial initial value Gama. d number unknown coefficients regression parameters. qn number unknown coefficients B-spline basis, , df degree + length(knot) + 1 (intercept included). ZMat ZMat design matrix corresponding regression parameters sample size d. UVec vector consisting left observation visit given interval-censoring design. VVec vector consisting right observation visit given interval-censoring design. knot internal breakpoints (.e., breakpoints without two ending points) define spline. default NULL, results basis ordinary polynomial regression. Typical values mean median one knot, quantiles knots. See also Boundary.knots. degree non-negative integer degree piece-wise polynomial. default value 3 cubic splines. Zero degree allowed function, difference compared bs function package splines. Note order polynomial equals degree plus one. boundary 2-dimensional boundary points anchor B-spline basis. default, range non-NA data. knot boundary supplied, basis parameters depend x. Data can extend beyond boundary. GENERATE_GRADIENT_HESSIAN function numerically calculates gradient vector Hessian matrix given weighted log-likelihood function two-phase sampling design. GENERATE_PHI function generates B-spline basis matrix values linear combination B-spline basis function given vector.","code":""},{"path":"/reference/BOOTSTRAP_PROCEDURE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","text":"brepsMax length(Gama) matrix bootstrap result.","code":""},{"path":"/reference/BOOTSTRAP_PROCEDURE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate the variances at phase two for the regression coefficients by\nusing a bootstrap procedure — BOOTSTRAP_PROCEDURE","text":"https://onlinelibrary.wiley.com/doi/10.1111/sjos.12152","code":""},{"path":"/reference/GENERATE_COX_GRADIENT_HESSIAN.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the gradient vector and the Hessian matrix of the weighted\nlog-likelihood function derived from a Cox proportional-hazards model\nwith interval censored data under two-phase sampling design — GENERATE_COX_GRADIENT_HESSIAN","title":"Calculate the gradient vector and the Hessian matrix of the weighted\nlog-likelihood function derived from a Cox proportional-hazards model\nwith interval censored data under two-phase sampling design — GENERATE_COX_GRADIENT_HESSIAN","text":"Calculate gradient vector Hessian matrix weighted log-likelihood function derived Cox proportional-hazards model interval censored data two-phase sampling design","code":""},{"path":"/reference/GENERATE_COX_GRADIENT_HESSIAN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the gradient vector and the Hessian matrix of the weighted\nlog-likelihood function derived from a Cox proportional-hazards model\nwith interval censored data under two-phase sampling design — GENERATE_COX_GRADIENT_HESSIAN","text":"","code":"GENERATE_COX_GRADIENT_HESSIAN(   Gama,   d,   qn,   ZMat,   UVec,   VVec,   knot,   degree,   boundary,   DELTA,   OMEGA,   GENERATE_PHI )"},{"path":"/reference/GENERATE_COX_GRADIENT_HESSIAN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the gradient vector and the Hessian matrix of the weighted\nlog-likelihood function derived from a Cox proportional-hazards model\nwith interval censored data under two-phase sampling design — GENERATE_COX_GRADIENT_HESSIAN","text":"Gama vector whose first d elements identical d-dimensional regrssion coefficients last qn elements identical qn-dimensional spline coefficients. d number unknown coefficients regression parameters. qn number unknown coefficients B-spline basis, , df degree + length(knot) + 1 (intercept included). ZMat design matrix corresponding regression parameters sample size d. UVec vector consisting left observation visit given interval-censoring design. VVec vector consisting right observation visit given interval-censoring design. knot internal breakpoints (.e., breakpoints without two ending points) define spline. default NULL, results basis ordinary polynomial regression. Typical values mean median one knot, quantiles knots. See also Boundary.knots. degree non-negative integer degree piece-wise polynomial. default value 3 cubic splines. Zero degree allowed function, difference compared bs function package splines. Note order polynomial equals degree plus one. boundary 2-dimensional boundary points anchor B-spline basis. default, range non-NA data. knot boundary supplied, basis parameters depend x. Data can extend beyond boundary. DELTA matrix row indicates interval-censoring type observation sample size 3. example, (1, 0, 0) indicates UVec observed VVec reaches right boundary, (0, 1, 0) indicates UVec VVec observed (0, 0, 1) indicates UVec reaches left boundary VVec observed observation. OMEGA vector consisting weights observation two-phase sampling. two-phase sampling used, values OMEGA 1's. GENERATE_PHI function generates B-spline basis matrix values linear combination B-spline basis function given vector.","code":""},{"path":"/reference/GENERATE_COX_GRADIENT_HESSIAN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the gradient vector and the Hessian matrix of the weighted\nlog-likelihood function derived from a Cox proportional-hazards model\nwith interval censored data under two-phase sampling design — GENERATE_COX_GRADIENT_HESSIAN","text":"list includes: d + qn dimensional gradient vector evaluated given Gama, (d + qn) (d + qn) Hessian matrix evaluated given Gama, d d estimated covariance matrix regression parameters given Gama.","code":""},{"path":"/reference/GENERATE_PHI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","title":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","text":"Calculate spline basis matrix values linear combination B-spline biasis function given vector","code":""},{"path":"/reference/GENERATE_PHI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","text":"","code":"GENERATE_PHI(x, knot, degree, boundary, coeff_spline)"},{"path":"/reference/GENERATE_PHI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","text":"x predictor vector. Missing values allowed. knot internal breakpoints (.e., breakpoints without two ending points) define spline. default NULL, results basis ordinary polynomial regression. Typical values mean median one knot, quantiles knots. See also Boundary.knots. degree non-negative integer degree piece-wise polynomial. default value 3 cubic splines. Zero degree allowed function, difference compared bs function package splines. Note order polynomial equals degree plus one. boundary 2-dimensional boundary points anchor B-spline basis. default, range non-NA data. knot boundary supplied, basis parameters depend x. Data can extend beyond boundary. coeff_spline coefficients vector evaluated corresponding B-spline basis matrix included intercept. length coeff_spline equals df degree + length(knot) + 1 (due presence intercept).","code":""},{"path":"/reference/GENERATE_PHI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","text":"list includes: matrix dimension length(x) df = degree + length(knot) (plus one intercept included) vector product matrix vector coeff_spline. Attributes correspond arguments specified returned usage functions package.","code":""},{"path":"/reference/GENERATE_PHI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the spline basis matrix and the values of a linear combination\nof B-spline biasis function at a given vector — GENERATE_PHI","text":"","code":"library(VarEst2Phase) GENERATE_PHI(x = c(0.1, 0.2, 0.3),           knot = c(0.25, 0.75),         degree = 2,       boundary = c(0, 1),   coeff_spline = c(0.1, 0.1, 0.1, 0.1, 0.1)) #> $phi_vector #> [1] 0.1 0.1 0.1 #>  #> $phi_matrix #>         1         2          3           4 5 #> [1,] 0.36 0.5866667 0.05333333 0.000000000 0 #> [2,] 0.04 0.7466667 0.21333333 0.000000000 0 #> [3,] 0.00 0.5400000 0.45333333 0.006666667 0 #>"},{"path":"/reference/GR.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate both the coefficients of the regression parameters and the\ncoefficients of the B-spline basis functions and estimate the variance\nof the estimated coefficents of the regression parameters by using\nGeneralized Rosen (GR) algorithm — GR","title":"Estimate both the coefficients of the regression parameters and the\ncoefficients of the B-spline basis functions and estimate the variance\nof the estimated coefficents of the regression parameters by using\nGeneralized Rosen (GR) algorithm — GR","text":"Estimate coefficients regression parameters coefficients B-spline basis functions estimate variance estimated coefficents regression parameters using Generalized Rosen (GR) algorithm","code":""},{"path":"/reference/GR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate both the coefficients of the regression parameters and the\ncoefficients of the B-spline basis functions and estimate the variance\nof the estimated coefficents of the regression parameters by using\nGeneralized Rosen (GR) algorithm — GR","text":"","code":"GR(   gama.ini,   active.set,   d,   qn,   ZMat,   UVec,   VVec,   knot,   degree,   boundary,   DELTA,   OMEGA,   GENERATE_GRADIENT_HESSIAN,   GENERATE_PHI )"},{"path":"/reference/GR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate both the coefficients of the regression parameters and the\ncoefficients of the B-spline basis functions and estimate the variance\nof the estimated coefficents of the regression parameters by using\nGeneralized Rosen (GR) algorithm — GR","text":"gama.ini initial value Gama. active.set vector includes active set corresponding gama.ini. d number unknown coefficients regression parameters. qn number unknown coefficients B-spline basis, , df degree + length(knot) + 1 (intercept included). ZMat design matrix corresponding regression parameters sample size d. UVec vector consisting left observation visit given interval-censoring design. VVec vector consisting right observation visit given interval-censoring design. knot internal breakpoints (.e., breakpoints without two ending points) define spline. default NULL, results basis ordinary polynomial regression. Typical values mean median one knot, quantiles knots. See also Boundary.knots. degree non-negative integer degree piece-wise polynomial. default value 3 cubic splines. Zero degree allowed function, difference compared bs function package splines. Note order polynomial equals degree plus one. boundary 2-dimensional boundary points anchor B-spline basis. default, range non-NA data. knot boundary supplied, basis parameters depend x. Data can extend beyond boundary. DELTA matrix row indicates interval-censoring type observation sample size 3. example, (1, 0, 0) indicates UVec observed VVec reaches right boundary, (0, 1, 0) indicates UVec VVec observed (0, 0, 1) indicates UVec reaches left boundary VVec observed observation. OMEGA vector consisting weights observation two-phase sampling. two-phase sampling used, values OMEGA 1's. GENERATE_GRADIENT_HESSIAN function numerically calculates gradient vector Hessian matrix given weighted log-likelihood function two-phase sampling design. GENERATE_PHI function generates B-spline basis matrix values linear combination B-spline basis function given vector.","code":""},{"path":"/reference/GR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate both the coefficients of the regression parameters and the\ncoefficients of the B-spline basis functions and estimate the variance\nof the estimated coefficents of the regression parameters by using\nGeneralized Rosen (GR) algorithm — GR","text":"list includes: vector consists estimated coefficients regression parameters, error message corresponding Hessian matrix, status message corresponding number replications updating lamda gama calculation, estimated covariance matrix regression coefficients.","code":""}]
